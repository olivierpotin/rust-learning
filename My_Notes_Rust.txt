
https://doc.rust-lang.org/book/second-edition/ch01-01-installation.html


https://rustup.rs/

curl https://sh.rustup.rs -sSf | sh


Welcome to Rust!

This will download and install the official compiler for the Rust programming 
language, and its package manager, Cargo.

It will add the cargo, rustc, rustup and other commands to Cargo's bin 
directory, located at:

  /Users/olivierpotin/.cargo/bin

This path will then be added to your PATH environment variable by modifying the
profile file located at:

  /Users/olivierpotin/.profile

You can uninstall at any time with rustup self uninstall and these changes will
be reverted.

Current installation options:

   default host triple: x86_64-apple-darwin
     default toolchain: stable
  modify PATH variable: yes

1) Proceed with installation (default)
2) Customize installation
3) Cancel installation
1

info: syncing channel updates for 'stable-x86_64-apple-darwin'
info: latest update on 2017-06-08, rust version 1.18.0 (03fc9d622 2017-06-06)
info: downloading component 'rustc'
 37.8 MiB /  37.8 MiB (100 %) 521.6 KiB/s ETA:   0 s                
info: downloading component 'rust-std'
 53.8 MiB /  53.8 MiB (100 %) 569.6 KiB/s ETA:   0 s                
info: downloading component 'cargo'
  3.6 MiB /   3.6 MiB (100 %) 572.1 KiB/s ETA:   0 s                
info: downloading component 'rust-docs'
 11.4 MiB /  11.4 MiB (100 %) 569.6 KiB/s ETA:   0 s                
info: installing component 'rustc'
info: installing component 'rust-std'
info: installing component 'cargo'
info: installing component 'rust-docs'
info: default toolchain set to 'stable'

  stable installed - rustc 1.18.0 (03fc9d622 2017-06-06)


Rust is installed now. Great!

To get started you need Cargo's bin directory ($HOME/.cargo/bin) in your PATH 
environment variable. Next time you log in this will be done automatically.

To configure your current shell run source $HOME/.cargo/env

Updating
Once you have Rust installed, updating to the latest version is easy. From your shell, run the update script:
$ rustup update
macbook-pro-de-olivier-1:Rust olivierpotin$ rustup update
info: syncing channel updates for 'stable-x86_64-apple-darwin'
info: checking for self-updates

  stable-x86_64-apple-darwin unchanged - rustc 1.18.0 (03fc9d622 2017-06-06)

Local documentation

The installer also includes a copy of the documentation locally, so you can read it offline. Run rustup doc to open the local documentation in your browser.


Now looking at CARGO:
---------------------
Cargo is Rust’s build system and package manager, and Rustaceans use Cargo to manage their Rust projects because it makes a lot of tasks easier.
- builds code
- download the libraries the code depends on (manage dependencies)
- build those libraries

macbook-pro-de-olivier-1:hello_world olivierpotin$ cargo --version
cargo 0.19.0 (28d1d60d4 2017-05-16)

$ cargo new hello_cargo --bin
$ cd hello_cargo

Cargo.toml
This file is in the TOML (Tom's Obvious, Minimal Language) format. TOML is similar to INI but has some extra goodies and is used as Cargo’s configuration format.

[package]
name = "hello_cargo"
version = "0.1.0"
authors = ["Your Name <you@example.com>"]

[dependencies]

The last line, [dependencies], is the start of a section for you to list any crates (which is what we call packages of Rust code) that your project will depend on so that Cargo knows to download and compile those too. 

Cargo expects your source files to live inside the src directory so that the top-level project directory is just for READMEs, license information, configuration files, and anything else not related to your code. In this way, using Cargo helps you keep your projects nice and tidy. There's a place for everything, and everything is in its place.

Building and Running a Cargo Project

macbook-pro-de-olivier-1:hello_cargo olivierpotin$ cargo run
    Finished dev [unoptimized + debuginfo] target(s) in 0.0 secs
     Running `target/debug/hello_cargo`
Hello, world!

The other advantage of using Cargo is that the commands are the same no matter what operating system you're on, so at this point we will no longer be providing specific instructions for Linux and Mac versus Windows.
